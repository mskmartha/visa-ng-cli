import { Component, OnInit, EventEmitter, Output, Input, ViewChild, TemplateRef, ElementRef } from '@angular/core';
import { Router } from '@angular/router';
import { MatDialog } from '@angular/material';
import { SAPenTestService } from './sa-pentest.service';
import { GlobalSharedService } from '../shared/shared.service';
import { UtilsService } from '../shared/utils.service';
import { IInjectData } from '../shared/shared.interface';
import { FormBuilder, FormGroup, Validators } from '@angular/forms';
import 'rxjs/Rx';
import { WorkFlowOptions, WorkFlowStepperComponent } from '../shared/work-flow';
import * as QIDTableConfig from './qid-servers.config.json';
import * as AppTableConfig from './qid-applications.config.json';
import {MatSnackBar} from '@angular/material';
import {SnackBarErrorComponent, SnackBarSuccessComponent} from '../shared/html-templates/snack-bar.component';
@Component({
  selector: 'app-sa-pentest',
  templateUrl: './sa-pentest.component.html',
  providers: [SAPenTestService, UtilsService],
  styleUrls: ['./sa-pentest.component.scss'],
})
export class SAPenTestComponent implements OnInit {
    @ViewChild('scroll') private scrollContainer: ElementRef;
    @Output() tabStatusEvent = new EventEmitter();
    @ViewChild('stepperDemo')
    public steppers: WorkFlowStepperComponent;
    public options: WorkFlowOptions = {
      vertical: true,
      linear: true,
      alternative: true,
      mobileStepText: true,
      enableSvgIcon: true,
      wrkFlwSteps: [10, 10, 10, 10, 10], // default state
      enabaled: [true, false, false, false, false]
    };
    /*
      Pen Test - Enable steps based on this logic
      Enable Step 1 by default
      Enable Step 2 and Step 3 when Step 1 is complete
      Enable Step 4 only when both Step 2 and Step 3 are complete
      Enable Step 5 only when Step 4 is complete.
    */
    dependencyMap = [null, [1], [1], [1, 2, 3], [1, 4]];
    /// upload options
    public uploadOptions = {
      endPoint: null
    };
    /////////
    public preScopeComplete = false;
    public scopingComplete = false;
    public qIdComplete = false;
    public schedulingComplete = false;
    public reportingComplete = false;
    /////////////////
    title = 'Multi-Step Wizard';
    @Input() formData;
    @Input() model;
    prescopeQnsMeta;
    scopingQnsMeta;
    schedulingQnsMeta;
    injectData: IInjectData;
    injectScopingData: IInjectData;
    injectSchedulingData: IInjectData;
    prescopeStepper = false;
    scopingStepper = false;
    schedulingStepper = false;
    requestData;
    ///////////
    firstFormGroup: FormGroup;
    secondFormGroup: FormGroup;
    subscription: any;
    public utils: UtilsService;
    psslData: any;

    /////////// QID
    public serverInfoConfig = <any>QIDTableConfig;
    public appInfoConfig = <any>AppTableConfig;
    loadQID = false;
    loadReporting = false;
    serversAdded = 0;
    appsAdded = 0;

    ////////////////
    prescopeThenBlock: TemplateRef<any> = null;
    prescopeElseBlock: TemplateRef<any> = null;
    scopingThenBlock: TemplateRef<any> = null;
    schedulingThenBlock: TemplateRef<any> = null;
    scopingElseBlock: TemplateRef<any> = null;
    schedulingElseBlock: TemplateRef<any> = null;


    @ViewChild('loadingBlock')
    loadingBlock: TemplateRef<any> = null;
    @ViewChild('errorBlock')
    errorBlock: TemplateRef<any> = null;
    @ViewChild('prescopeBlock')
    prescopeBlock: TemplateRef<any> = null;
    @ViewChild('scopingBlock')
    scopingBlock: TemplateRef<any> = null;

    @ViewChild('schedulingBlock')
    schedulingBlock: TemplateRef<any> = null;

  constructor(
        private api: GlobalSharedService,
        private _saPenTestService: SAPenTestService,
        public dialog: MatDialog, private router: Router,
        private utilService: UtilsService,
        private _formBuilder: FormBuilder,
        public snackBar: MatSnackBar
    ) {
        this.utils = utilService;
        this.subscription = this.api.getData('pssl').subscribe(_psslData => {
          this.psslData = _psslData;
          this.serverInfoConfig.endPoint = '/sa-services/' + this.psslData.id + '/pentest/qId/servers';
          this.appInfoConfig.endPoint = '/sa-services/' + this.psslData.id + '/pentest/qId/applications';

        });
    }
    ngOnInit() {
        this.firstFormGroup = this._formBuilder.group({
        firstCtrl: ['', Validators.required]
        });
        this.secondFormGroup = this._formBuilder.group({
        secondCtrl: ['', Validators.required]
        });

        //// default
        this.prescopeThenBlock = this.loadingBlock;
        this.prescopeElseBlock = this.loadingBlock;
        this.scopingThenBlock = this.loadingBlock;
        this.schedulingThenBlock = this.loadingBlock;
        this.scopingElseBlock = this.loadingBlock;
        this.getWorkStatus().then(
          (res) => {
            this.loadStep(0);
          });

    }
    reloadPenTest() {
      this.prescopeThenBlock = this.loadingBlock;
      this.prescopeElseBlock = this.loadingBlock;
      this.scopingThenBlock = this.loadingBlock;
      this.schedulingThenBlock = this.loadingBlock;
      this.scopingElseBlock = this.loadingBlock;
      this.getWorkStatus().then(
        (res) => {
          this.loadStep(0);
        });

    }
    loadStep(stepNumber) {
      switch (stepNumber) {
        case 0: {
          this.loadPreScopeStep();
          break;
        }
        case 1: {
          this.loadQIDStep();
          break;
        }
        case 2: {
          this.loadScopeStep();
          break;
        }
        case 3: {
          this.loadSchedulingStep();
          break;
        }
        case 4: {
          this.loadReportingStep();
          break;
        }
        default: {
          this.loadPreScopeStep();
          break;
        }
      }
    }
    loadPreScopeStep() {
      // default tab is prescope
      this.getQuestions('prescope').then((hasPermission) => {
        this.injectData = {
          isViewDisabled: (hasPermission && !this.preScopeComplete) ? false : true,
          id: null,
          formId: 'prescope', // this.model.data.formId
          canShow: null,
          actionId: 12, // this.model.data.actionId
          submitBtnlabel: null,
          teamId: null,
          stateId: null,
          customLabels: null,
          customBttns: [
          ]
        };
      });
    }
    loadQIDStep() {
      // console.log('loadQIDStep');
      this.steppers.clearError();
      this.loadQID = true;
      this.scrollToElement();
    }
    loadScopeStep() {
      this.getQuestions('scoping').then((hasPermission) => {
        this.injectScopingData = {
          isViewDisabled: (hasPermission && !this.scopingComplete) ? false : true,
          id: null,
          formId: 'scoping',
          canShow: null,
          actionId: 12, // this.model.data.actionId
          submitBtnlabel: null,
          teamId: null,
          stateId: null,
          customLabels: null,
          customBttns: []
        };
      });
    }
    loadSchedulingStep() {
      this.getQuestions('scheduling').then((hasPermission) => {
        this.injectSchedulingData = {
          isViewDisabled: (hasPermission && !this.schedulingComplete) ? false : true,
          id: null,
          formId: 'scheduling',
          canShow: null,
          actionId: 12, // this.model.data.actionId
          submitBtnlabel: null,
          teamId: null,
          stateId: null,
          customLabels: null,
          customBttns: []
        };
      });
    }
    loadReportingStep() {
      // console.log('loadQIDStep');
      this.steppers.clearError();
      this.loadReporting = true;
      this.scrollToElement();
      this.uploadOptions.endPoint = '/sa-services/sa/' + this.psslData.id + '/engagementType/5/report';
      this.uploadOptions = Object.assign({}, this.uploadOptions);
    }
    getWorkStatus(feature?: string) {
        return new Promise(
            (resolve) => {
                this._saPenTestService.getWorkStatus(this.psslData.id, 'prescope').subscribe(res => {
                    if (res.features[1].id === 5) {
                      this.preScopeComplete = true;
                      // first disable linear workflow
                      this.options.linear = false;
                    }
                    if (res.features[2].id === 5) {
                      this.qIdComplete = true;
                      // disable servers
                      this.serverInfoConfig.disabled = true;
                      this.serverInfoConfig.complete = true;
                      this.serverInfoConfig = Object.assign({}, this.serverInfoConfig);

                      // disable apps
                      this.appInfoConfig.disabled = true;
                      this.appInfoConfig.complete = true;
                      this.appInfoConfig = Object.assign({}, this.appInfoConfig);
                    }
                    if (res.features[3].id === 5) {
                      this.scopingComplete = true;
                    }
                    if (res.features[4].id === 5) {
                      this.schedulingComplete = true;
                    }
                    if (res.features[5].id === 5) {
                      this.reportingComplete = true;
                    }
                    this.options = Object.assign({}, this.options);
                    this.updateWrkFlwStatus(res);
                    resolve(res);
                }, err => {
                });
            });
    }
    getQuestions(feature: string) {
      switch (feature) {
        case 'prescope': {
          this.prescopeStepper = true;
          this.prescopeThenBlock = this.loadingBlock;
          return new Promise((resolve) => {
            this._saPenTestService.getQuestionaire(this.psslData.id, feature).subscribe(res => {
              this.prescopeQnsMeta = res.text().length > 0 ? res.json() : null;
              this.prescopeStepper = true;
              this.prescopeThenBlock = this.prescopeBlock;
              resolve((res.headers.get('x-permission') === '1'));
            }, err => {
              this.prescopeThenBlock = this.errorBlock;
            });
          });
        }
        case 'scoping': {
          return new Promise((resolve) => {
            this._saPenTestService.getQuestionaire(this.psslData.id, feature).subscribe(res => {
              this.scopingQnsMeta = res.text().length > 0 ? res.json() : null;
              this.scopingStepper = true;
              this.scopingThenBlock = this.scopingBlock;
              resolve((res.headers.get('x-permission') === '1'));
            }, err => {
              this.scopingThenBlock = this.errorBlock;
            });
          });
        }
        case 'scheduling': {
          return new Promise((resolve) => {
            this._saPenTestService.getQuestionaire(this.psslData.id, feature).subscribe(res => {
              this.schedulingQnsMeta = res.text().length > 0 ? res.json() : null;
              this.schedulingStepper = true;
              this.schedulingThenBlock = this.schedulingBlock;
              resolve((res.headers.get('x-permission') === '1'));
            }, err => {
              this.schedulingThenBlock = this.errorBlock;
            });
          });
        }
        default: {
          break;
        }
      }
    }
    submitQns(emitObj) {
      this.requestData = {
        'id': this.psslData.id,
        'actionId': emitObj.action,
        'questionsResponseDOs': emitObj.postBody
      };
      switch (emitObj.formId) {
        case 'prescope': {
          this.prescopeStepper = true;
          this.prescopeThenBlock = this.loadingBlock;
          this._saPenTestService
            .submitQuestionaire(this.psslData.id, emitObj.formId, emitObj.action, JSON.stringify(this.requestData), this.psslData)
            .subscribe(res => {
              this.snackBar.openFromComponent(SnackBarSuccessComponent, {
                duration: 2000,
              });

              this.getWorkStatus().then(
                (statuses) => {
                  this.preScopeComplete = true;
                  this.tabStatusEvent.next(5);
                  this.loadPreScopeStep();
                  this.selectWrkFlw();
                });
            }, err => {
              this.snackBar.openFromComponent(SnackBarErrorComponent, {
                duration: 2000,
              });
            });
          break;
        }
        case 'scoping': {
          this.scopingThenBlock = this.loadingBlock;
          this._saPenTestService
            .submitQuestionaire(this.psslData.id, emitObj.formId, emitObj.action, JSON.stringify(this.requestData), this.psslData)
            .subscribe(res => {
              this.snackBar.openFromComponent(SnackBarSuccessComponent, {
                duration: 2000,
              });
              this.getWorkStatus().then(
                (statuses) => {
                  this.tabStatusEvent.next(5);
                  this.loadScopeStep();
                  this.selectWrkFlw();
                });
            }, err => {
              this.snackBar.openFromComponent(SnackBarErrorComponent, {
                duration: 2000,
              });
            });
          break;
        }
        case 'scheduling': {
          this.schedulingThenBlock = this.loadingBlock;
          this._saPenTestService
            .submitQuestionaire(this.psslData.id, emitObj.formId, emitObj.action, JSON.stringify(this.requestData), this.psslData)
            .subscribe(res => {
              this.snackBar.openFromComponent(SnackBarSuccessComponent, {
                duration: 2000,
              });
              this.getWorkStatus().then(
                (statuses) => {
                  this.tabStatusEvent.next(5);
                  this.loadSchedulingStep();
                  this.selectWrkFlw();
                });
            }, err => {
              this.snackBar.openFromComponent(SnackBarErrorComponent, {
                duration: 2000,
              });
            });
          break;
        }
        default: {
          break;
        }
      }
    }
    serversOnChange(tableData) {
        this.serversAdded = tableData.length;
    }
    appsOnChange(tableData) {
        this.appsAdded = tableData.length;
    }
    submitQID() {
      this._saPenTestService.submitQID(this.psslData.id).subscribe(res => {
        this.snackBar.openFromComponent(SnackBarSuccessComponent, {
          duration: 2000,
        });

        this.getWorkStatus().then(
          (statuses) => {
            this.qIdComplete = true;
            // disable servers
            this.serverInfoConfig.disabled = true;
            this.serverInfoConfig.complete = true;
            this.serverInfoConfig = Object.assign({}, this.serverInfoConfig);

            // disable apps
            this.appInfoConfig.disabled = true;
            this.appInfoConfig.complete = true;
            this.appInfoConfig = Object.assign({}, this.appInfoConfig);

            this.tabStatusEvent.next(5);
            this.selectWrkFlw();
          });
      }, err => {
        this.snackBar.openFromComponent(SnackBarErrorComponent, {
          duration: 2000,
        });
      });
    }
    public selectWrkFlw(): void {
        // this.steppers.showFeedback('Checking, please wait ...');
        if (this.preScopeComplete) {
          this.options.linear = false;
          this.options = Object.assign({}, this.options);
          this.steppers.clearError();
          this.steppers.next();
        }
        this.getWorkStatus().then(
            (n) => {
                this.loadStep(this.steppers.currentStep);
            });
    }

    public previousStep(): void {
        this.steppers.back();
    }

    public cancel(): void {
        this.steppers.back();
    }

    public nextStep(): void {
        this.steppers.next();
    }

    public toggleMobileStepText(): void {
        this.options.mobileStepText = !this.options.mobileStepText;
        this.options = Object.assign({}, this.options);
    }

    public toggleLinear(): void {
        this.options.linear = !this.options.linear;
        this.options = Object.assign({}, this.options);
    }

    public toggleAlternative(): void {
        this.options.alternative = !this.options.alternative;
        this.options = Object.assign({}, this.options);
    }

    public toggleVertical(): void {
        this.options.vertical = !this.options.vertical;
        this.options = Object.assign({}, this.options);
    }

    public showError(): void {
        this.steppers.error('Something went wrong');
    }

    public clearError(): void {
        this.steppers.clearError();
    }

    public showFeedback(): void {
        this.steppers.showFeedback('Step 1 looks great! Step 2 is comming up.');
    }

    public clearFeedback(): void {
        this.steppers.clearFeedback();
    }

    public updateWrkFlwStatus(res) {
        this.options.wrkFlwSteps = [
          res.features[1].id,
          res.features[2].id,
          res.features[3].id,
          res.features[4].id,
          res.features[5].id
          ];
        this.options.enabaled = [
          true,
          !this.options.linear && this.checkDependency(1, res),
          !this.options.linear && this.checkDependency(2, res),
          !this.options.linear && this.checkDependency(3, res),
          !this.options.linear && this.checkDependency(4, res)
        ]
        // console.log('options', this.options);
        this.options = Object.assign({}, this.options);
    }
    checkDependency(step, res) {
      let n = 0;
      if (Array.isArray(this.dependencyMap[step]) || this.dependencyMap[step].length ) {
        this.dependencyMap[step].forEach(q => {
          if (res.features[q].id !== 5) {
            n = n + 1;
          }
        });
      }
      return !(n > 0);
    }

    tryAgain() {

    }

    scrollToElement(): void {
      try {
        //this.scrollContainer.nativeElement.scrollIntoView(true);
      } catch (err) {
        console.error(err);
      }
    }

}

